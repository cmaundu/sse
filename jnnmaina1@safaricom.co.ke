Introduction
Sart, is a hospital system designed in java utilizing Spring JPA and hibernate. The system has been implemented using various design patterns, majorly Model View Controller, repositories and services, Code Dependency injection. The system is supposed to use a mysql database as Information Server.
This system is a custom application build by self and extended for the purposes of this technical assessment test.

The following design considerations have been implemented.
- Code has been partitioned and grouped using packages based on the purpose of the class. Java code has been devided into config and site at high level. site has been divided into controller, service, entity, repository, form, model etc. User Interface has been grouped based on the purpose, and as such, there are patient, attendance, requests etc folders.
- Bootstrap classes (singleton) have been utilized to ensure consistent and single load of configuration classes required by the Java EE to execute code using web containers.
- Security has been provided using Spring Framework Security classes but extended to consume database authentication and different role configurations. Much emphasize is single user role implementation attached to various permissions.
- Data access has been implemented using Spring JPA 2.1 to remove boilerplate duplication of code. Additional code has been implemented using Simple JDBC templates, which are lightweight especially while accessing Stored Procedures.
- The code design adheres to greater extend in the use SOLID design patterns especially single use and extensibility. This is demonstrated by the simplified Controllers only used to provide web control, entities – used as Data Transfer Objects to database, repositories – responsible for database manipulation.
- This system is designed to run on a tomcat JEE server(s), with a load balance http server which is supposed to utilize sticky sessions (JSessionID) to provide High Availability and Disaster Recovery of the system.
- A Unit test demonstration has been implemented in Test Packages sart.test.UserServiceTest which among other tests, has implemented validation that a user cannot be persisted in the database without a username.
- The system has implemented EhCache, an open source optimized cache for Java EE, since diagnosis information does not have frequent updates, the cache has been implemented for this entity in co.ke.sart.site.entity.ICD - using attribute @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
--- Entity Cacheing querying is using Spring inbuilt cache to retrieve values incase of slow database speeds.
- The application is both accessible via web exposed through html pages or via Rest calls. A demonstration for the rest call http://localhost:8080/safari/report/list has been implemented in co.ke.sart.site.controller.ReportRestController which returns a JSON Map object with all the details of a report.
- On the frontend, the application employes use of spring forms for data capture, CSS3 and Java Script for additional user displays. Some of the CSS were borrowed from https://adminlte.io/themes/AdminLTE/index2.html - my favorite UI designs. 
- The system also employes Internationlization using Resource Message Bundles located in web/WEB-INF/i18n.
- Implemented Transportation public API (Transportation - https://api.aftership.com/, v4). 
---co.ke.sart.site.model.Courier.java is the model class with fields, 
---co.ke.sart.site.Service.CourierService is the service class consuming Courier model and implemeting connection and Rest API calls, then
---co.ke.sart.site.Controller implenting Controller (in model view Controller) which listens to ../courier/list and lists all courier services.
---jsp/couriers/list is a jsp listing all couriers in a web page.
---jsp/couriers/search a jsp page for searching courier service providers.
Additional Architectural 
1.	Distributed application in several nodes. The design of this application allows use of sticky sessions, which allows for load balancing using any http or other load balancers to allow persisting of user requests on specific nodes.
2.	Services have been designed to be more course grained avoiding dependencies and many calls which attempts to fulfil request with minimum interactions
3.	Logging is configured to use asynchronous calls, which eliminates log latency times included in the service calls.
4.	The system employs use of shared database connection resources; this eliminates overheads incurred in establishing such connections. In addition, data retrieval during manipulation and display is done per table with maximum on one join to reduce overheads associated with many joins.
5.	Parallel processing using Java lambda expressions have been implemented. This ensures through lambda, only the required set is processed, and such processing happens in parallel.
6.	Re-use of queried data via Spring Cache framework reduces round trips to the database by reusing retrieved data. This will reduce number of database reads.
